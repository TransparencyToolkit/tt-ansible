---
# install and configure the OCRServer component of Transparency Toolkit

- name: Check if we need to install OCRServer
  stat: path=/lib/systemd/system/ocrserver.service
  register: get_ocrserver

- name: Fetch OCRServer source code
  register: ocrserver
  async: 3600
  poll: 10
  retries: 5
  git:
    depth: 1
    dest: OCRServer
    repo: https://github.com/TransparencyToolkit/OCRServer
    umask: "0077"

- name: install dependencies
  become: true
  retries: 10
  apt:
    state: latest
    install_recommends: no
    cache_valid_time: 7200
    update_cache: yes
    name:
      - graphicsmagick
      - poppler-data
      - poppler-utils
      - ghostscript
      - tesseract-ocr
      - pdftk
      - openjdk-8-jre-headless
      - libreoffice
      #- libcurl3
      #- libcurl3-gnutls
      - libcurl4-openssl-dev
      - libmagic-dev

- name: Check if we need to fetch Tika
  stat: path=/lib/systemd/system/tika.service
  register: tika

- name: Create temporary directory for Tika GPG key
  when: not tika.stat.exists
  tempfile: state=directory suffix=.tika.gpg
  register: tika_gpg_dir # tika_gpg_dir.path

- name: fetch tika-server jar file
  when: not tika.stat.exists
  retries: 10
  command:
    curl "https://archive.apache.org/dist/tika/tika-server-{{ tika_version }}.jar"
    -o "tika-server-{{ tika_version }}.jar.unverified"

- name: fetch tika-server jar file
  when: not tika.stat.exists
  retries: 10
  get_url:
    url: "https://archive.apache.org/dist/tika/tika-server-{{ tika_version }}.jar.asc"
    dest: "{{cwd}}/tika-server-{{ tika_version }}.jar.asc"
    validate_certs: yes


- name: Install Tika GPG signing key
  when: not tika.stat.exists
  become: true
  template:
    src: tika.key.asc
    dest: '{{ cwd }}/tika.key.asc'
    mode: 0444 #ugo=r

- name: fetch tika-server keys
  when: not tika.stat.exists
  command: # from 'Tim' from https://people.apache.org/keys/group/tika.asc
    gpg --homedir '{{ tika_gpg_dir.path }}'
        --import '{{ cwd }}/tika.key.asc'

- name: verify tika-server signature
  when: not tika.stat.exists
  command:
    gpg --homedir '{{ tika_gpg_dir.path }}'
        --verify '{{cwd}}/tika-server-{{ tika_version }}.jar.asc'
        '{{cwd}}/tika-server-{{ tika_version }}.jar.unverified'

- name: put tika-server jar file in place
  when: not tika.stat.exists
  copy:
    remote_src: yes
    src: '{{cwd}}/tika-server-{{ tika_version }}.jar.unverified'
    dest: '{{cwd}}/tika-server-{{ tika_version }}.jar'

- name: install ruby gem dependencies
  when: not tika.stat.exists
  become: true
  command: bash -lc 'gem install doc_integrity_check mimemagic docsplit curb ruby-filemagic pry mail listen rubyzip'

- name: Install Tika service
  when: not tika.stat.exists
  become: true
  template:
    src: tika.service.j2
    dest: /lib/systemd/system/tika.service
    mode: 0444 #ugo=r

- name: Wait for git repos to sync
  async_status:
    jid: "{{ ocrserver.ansible_job_id }}"
  retries: 600
  delay: 5
  until: ocrserver.finished

- name: Install OCRServer service
  when: not get_ocrserver.stat.exists
  become: true
  template:
    src: ocrserver.service.j2
    dest: /lib/systemd/system/ocrserver.service
    mode: 0444 #ugo=r

- name: Creates ocrserver.service.d directory
  become: true
  file: path=/etc/systemd/system/ocrserver.service.d/ state=directory

- name: set environment variables in systemd conf
  become: true
  blockinfile:
    create: yes
    mode: 0440 # ug=r,o=
    dest: /etc/systemd/system/ocrserver.service.d/{{ item.name }}.conf
    content: |
      [Service]
      Environment="{{item.name}}={{ item.value }}"
  with_items:
    - {name: 'OCR_IN_PATH', value: '{{ocr_in_path}}' }
    - {name: 'OCR_OUT_PATH', value: '{{ocr_out_path}}' }
    - {name: 'PROJECT_INDEX', value: '{{project_index}}' }

- name: OCRServer - Turn off systemd services
  become: true
  systemd:
    state: stopped
    enabled: no
    masked: yes
    daemon_reload: yes
    name: "{{item}}"
  with_items:
  - ocrserver
  - tika

# TODO see OCRServer README for details on how to test
