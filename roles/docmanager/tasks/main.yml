---

- name: Fetch DocManager source code
  register: docmanager
  async: 3600
  poll: 2
  retries: 3
  git:
    force: yes # TODO we still modify the database yaml file
    depth: 1
    dest: DocManager
    repo: https://github.com/TransparencyToolkit/DocManager.git
    umask: "0077"
    recursive: no
    track_submodules: no

- name: Install our dependencies from apt
  become: true
  retries: 2
  apt:
    state: latest
    install_recommends: no
    cache_valid_time: 7200
    update_cache: yes
    name:
      - postgresql # database used by DocManager for metadata
      - postgresql-client # for pq/postgres gem
      - libpq-dev         # for pq/postgres gem
      - postgresql-contrib # hstore extension
      - sudo # required for 'become'
      - python-psycopg2 # for ansible postgres_db module
      - apt-transport-https # for: elasticsearch
      - curl # for: rbenv?
      - libcurl4-openssl-dev # undeclared/missing dependency for curb gem

- name: Ensure PostgreSQL service has started
  become: true
  service: name=postgresql state=restarted enabled=yes masked=no

- name: DocManager - generate random postgres password
  shell: "xxd -ps -l 16 /dev/urandom"
  register: postgres_password_fh

- name: DocManager - register postgres password fact
  set_fact: postgres_password="{{ postgres_password_fh.stdout }}"

- name: wait for postgres to come up
  wait_for:
    port: 5432

- name: DocManager - provision postgres db
  become: yes
  become_user: postgres
  postgresql_db:
    encoding: UTF-8
    name: "{{ postgres_db }}"
    template: "template1"
    # TODO can use "state: dump / target: /my/file.sql" to backup

- name: "DocManager - provision hstore extension for db '{{ postgres_db }}'"
  become: yes
  become_user: postgres
  postgresql_ext:
    db: "{{ postgres_db }}"
    name: hstore # technically also need plpgsql

- name: DocManager - provision postgres user
  become: yes
  become_user: postgres
  postgresql_user:
    db: "{{ postgres_db }}"
    name: "{{ postgres_username }}"
    password: "{{ postgres_password }}"
    encrypted: yes # required for pg >= 10
    priv: all
    role_attr_flags: CREATEDB,SUPERUSER
    # ^-- TODO make it not drop the DB so we can limit privs

- name: DocManager - learn location of postgres' hba.conf
  become: true
  become_user: postgres
  shell: chdir=/ psql -P format=unaligned -tc 'show hba_file;'
  register: postgres_hba_cmd

- name: "DocManager - allow unix socket logins with passwords for postgres user '{{ postgres_username }}'"
  become: true
  lineinfile:
    dest: "{{ postgres_hba_cmd.stdout }}"
    insertbefore: "^local\\s+all\\s+all\\s+.*peer$"
    #line: "local\t{{ postgres_db }}\t{{ postgres_username }}\t\tmd5" # TODO
    line: "local\tall\t{{ postgres_username }}\t\tmd5"

- name: Ensure PostgreSQL service is reloaded after config changes
  become: true
  service: name=postgresql state=reloaded enabled=yes

- name: wait for postgres to come up
  wait_for:
    port: 5432

- name: DocManager - wait for git sync to complete
  async_status:
    jid: "{{ docmanager.ansible_job_id }}"
  register: docmanager_result
  until: docmanager_result.finished
  retries: 300

- name: DocManager - configure postgres credentials in app
  template:
    src: database.yml.j2
    dest: DocManager/config/database.yml
    mode: 0600 # u=rw,go=

- name: DocManager - bundle install
  become: true
  retries: 1
  command: chdir={{cwd}}/DocManager bash -lc 'bundle install'

- name: generate SECRET_KEY_BASE
  shell: "xxd -ps -l 20 /dev/urandom"
  register: docmanager_secret_key_base_fh

- name: DocManager - setup rake db stuff
  shell: chdir=DocManager bash -lc 'RAILS_ENV=production SECRET_KEY_BASE={{docmanager_secret_key_base_fh.stdout}} rake db:create'
- name: DocManager - setup rake db stuff
  shell: chdir={{cwd}}/DocManager bash -lc 'RAILS_ENV=production SECRET_KEY_BASE={{docmanager_secret_key_base_fh.stdout}} rake db:migrate'

- name: Install DocManager service
  become: true
  template:
    src: docmanager.service.j2
    dest: /lib/systemd/system/docmanager.service
    mode: 0444 # ugo=r

- name: Install DocManager-reload path watcher service
  become: true
  template:
    src: docmanager-reload.service.j2
    dest: /lib/systemd/system/docmanager-reload.service
    mode: 0444 # ugo=r

- name: Install DocManager-reload path watcher service
  become: true
  template:
    src: docmanager-reload.path.j2
    dest: /lib/systemd/system/docmanager-reload.path
    mode: 0444 # ugo=r

- name: Creates docmanager.service.d directory
  become: true
  file: path=/etc/systemd/system/docmanager.service.d/ state=directory

- name: set environment variables in systemd conf
  become: true
  blockinfile:
    create: yes
    mode: 0440 # ug=r,o=
    dest: /etc/systemd/system/docmanager.service.d/{{ item.name }}.conf
    content: |
      [Service]
      Environment="{{item.name}}={{ item.value }}"
  with_items:
    - {name: 'SECRET_KEY_BASE', value: '{{ docmanager_secret_key_base_fh.stdout }}' }
    - {name: 'REDIS_URL', value: '{{redis_url}}' }
    - {name: 'CATALYST_URL', value: '{{ catalyst_url }}'}


- name: Restart DocManager systemd service
  become: true
  systemd:
    state: restarted
    daemon_reload: yes
    masked: no
    enabled: yes
    name: "{{item}}"
  with_items:
  - docmanager
  - docmanager-reload.service
  - docmanager-reload.path

- name: Ensure DocManager-reload service has started
  become: true
  systemd: name=docmanager-reload.path enabled=yes

- name: Ensure DocManager service has started
  become: true
  service: name=docmanager state=started enabled=yes

- name: Wait for DocManager to start
  wait_for:
    port: 3000